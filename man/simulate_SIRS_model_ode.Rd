% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_SIRS_model_ode.R
\name{simulate_SIRS_model_ode}
\alias{simulate_SIRS_model_ode}
\title{SIRS model}
\usage{
simulate_SIRS_model_ode(
  vars = c(S = 1000, I = 1, R = 0),
  pars = c(n = 0, b = 0.001, g = 1, w = 1, m = 1),
  times = c(tstart = 0, tfinal = 100, dt = 0.1)
)
}
\arguments{
\item{vars}{vector of starting conditions for model variables : numeric 
\itemize{ 
\item S : starting value for Susceptible : numeric
\item I : starting value for Infected and Symptomatic : numeric
\item R : starting value for Recovered : numeric
}}

\item{pars}{vector of values for model parameters : numeric 
\itemize{ 
\item n : births : numeric
\item b : infection rate : numeric
\item g : rate at which hosts recover (inverse of symptomatic duration) : numeric
\item w : rate at which immunity wanes (inverse of immunity duration) : numeric
\item m : natural deaths (inverse of life-span) : numeric
}}

\item{times}{vector of values for model times : numeric 
\itemize{ 
\item tstart : Start time of simulation : numeric
\item tfinal : Final time of simulation : numeric
\item dt : Time step : numeric
}}
}
\value{
The function returns the output as a list. 
The time-series from the simulation is returned as a dataframe saved as list element \code{ts}. 
The \code{ts} dataframe has one column per compartment/variable. The first column is time.
}
\description{
A 3 compartment model with natural births and deaths and waning immunity.
}
\details{
The model includes susceptible, exposed/asymptomatic, infected/symptomatic, and recovered compartments. The processes that are modeled are infection, progression to infectiousness, recovery and waning immunity. Natural births and deaths are also included.

This code is was generated by the modelbuilder package R.  
The model is implemented as a set of ordinary differential equations using the deSolve package. 
The following R packages need to be loaded for the function to work: deSolve.
}
\section{Warning}{
 This function does not perform any error checking. So if you try to do something nonsensical (e.g. have negative values for parameters), the code will likely abort with an error message.
}

\section{Model Author}{
 Andreas Handel
}

\section{Model creation date}{
 2020-06-17
}

\section{Code Author}{
 generated by the \code{modelbuilder} R package
}

\section{Code creation date}{
 2020-06-17
}

\examples{
 
# To run the simulation with default parameters:  
result <- simulate_SIRS_model_ode() 
# To choose values other than the standard one, specify them like this:  
result <- simulate_SIRS_model_ode( vars = c(S = 2000,I = 2,R = 0)) 
# You can display or further process the result, like this:  
plot(result$ts[,'time'],result$ts[,'S'],xlab='Time',ylab='Numbers',type='l') 
print(paste('Max number of S: ',max(result$ts[,'S']))) 
}
